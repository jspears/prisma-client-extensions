generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["extendedWhereUnique"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id   String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name String

  users    User[]
  projects Project[]
  tasks    Task[]
  team     Team[]
}

model User {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId String @default(dbgenerated("(current_setting('app.current_company_id'::text))::uuid")) @db.Uuid
  email     String @unique

  company       Company   @relation(fields: [companyId], references: [id], onDelete: Cascade)
  profile       Profile?
  ownedProjects Project[]
  assignedTasks Task[]
  teams         Team[]
  ledTeams      Team[]    @relation("leader")
}

model Profile {
  user   User   @relation(fields: [userId], references: [id])
  userId String @unique @db.Uuid
}

model Team {
  id        String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId String @default(dbgenerated("(current_setting('app.current_company_id'::text))::uuid")) @db.Uuid
  leaderId  String @db.Uuid

  company  Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  leader   User        @relation("leader", fields: [leaderId], references: [id])
  members  User[]
  projects Ownership[]
}

model Ownership {
  id             String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  teamId         String    @db.Uuid
  projectId      String    @db.Uuid
  effectiveAt    DateTime
  effectiveUntil DateTime?

  team    Team    @relation(fields: [teamId], references: [id])
  project Project @relation(fields: [projectId], references: [id])
}

model Project {
  id        String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId String  @default(dbgenerated("(current_setting('app.current_company_id'::text))::uuid")) @db.Uuid
  userId    String? @db.Uuid
  title     String

  company Company     @relation(fields: [companyId], references: [id], onDelete: Cascade)
  owner   User?       @relation(fields: [userId], references: [id], onDelete: SetNull)
  tasks   Task[]
  teams   Ownership[]
}

enum TaskStatus {
  Pending
  InProgress
  Complete
  WontDo
}

model Task {
  id         String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  companyId  String     @default(dbgenerated("(current_setting('app.current_company_id'::text))::uuid")) @db.Uuid
  projectId  String     @db.Uuid
  userId     String?    @db.Uuid
  title      String
  status     TaskStatus
  isComplete Boolean
  size       Int
  bigSize    BigInt

  company  Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  project  Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  assignee User?   @relation(fields: [userId], references: [id], onDelete: SetNull)
}

model Attribute {
  serial Int    @default(autoincrement())
  uuid   String @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime

  stringValue           String   @unique
  stringOptional        String?
  stringList            String[]
  stringDefault         String   @default("foo")
  stringOptionalDefault String?  @default("foo")
  stringListDefault     String[] @default(["foo", "bar"])

  @@id([serial, uuid])
  @@unique([serial, createdAt])
}
